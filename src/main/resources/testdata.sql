DROP ALL OBJECTS;

create table IF NOT EXISTS users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100),
    email varchar(100) NOT NULL,
    login varchar(100) NOT NULL,
    birthday date
    );

create unique index if not exists USER_EMAIL_UINDEX on users (email);
create unique index if not exists USER_EMAIL_UINDEX on users (login);

create table IF NOT EXISTS genres
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL,
    CONSTRAINT uq_genres_name UNIQUE (name)
    );


create table IF NOT EXISTS mpa
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL,
    description varchar(200),
    CONSTRAINT uq_mpa_name UNIQUE (name)
    );


create table IF NOT EXISTS friendships
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   INTEGER REFERENCES users (id),
    friend_id INTEGER REFERENCES users (id),
    is_accepted boolean,
    CONSTRAINT uq_friendship UNIQUE (user_id,friend_id)
    );

alter table friendships alter COLUMN is_accepted SET DEFAULT FALSE;

create table IF NOT EXISTS films
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL,
    description varchar(200),
    mpa_id INTEGER REFERENCES mpa (id),
    release_date date,
    duration int
    );

create table IF NOT EXISTS films_genres
(
    film_id   INTEGER REFERENCES films (id),
    genre_id INTEGER REFERENCES genres (id),
    PRIMARY KEY(film_id, genre_id)
    );

create table IF NOT EXISTS films_likes
(
    film_id INTEGER REFERENCES films (id),
    user_id INTEGER REFERENCES users (id),
    PRIMARY KEY(film_id, user_id)
    );

CREATE TABLE IF NOT EXISTS reviews (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	content CHARACTER VARYING NOT NULL,
	is_positive BOOLEAN,
	user_id INTEGER REFERENCES users (id),
	film_id INTEGER REFERENCES films (id),
	CONSTRAINT uq_user_film_review UNIQUE (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS review_likes (
	user_id INTEGER REFERENCES users (id),
	review_id INTEGER REFERENCES reviews (id) ON DELETE CASCADE,
	was_usefull INTEGER NOT NULL,
	CONSTRAINT uq_user_review_like UNIQUE (user_id, review_id)
);

CREATE VIEW IF NOT EXISTS prepare_reviews AS
SELECT r.*, COALESCE(rl.useful, 0) AS useful
FROM REVIEWS r
LEFT JOIN (
	SELECT
		review_id,
		SUM(was_usefull) AS useful
	FROM REVIEW_LIKES rl
	GROUP BY review_id
) AS rl
ON rl.review_id = r.id;

MERGE INTO MPA KEY (ID)
    VALUES (1,'G','у фильма нет возрастных ограничений'),
    (2,'PG','детям до 13 лет просмотр не желателен'),
    (3,'PG-13','детям до 13 лет просмотр не желателен'),
    (4,'R','лицам до 17 лет просматривать фильм можно только в присутствии взрослого'),
    (5,'NC-17','лицам до 18 лет просмотр запрещён');

MERGE INTO genres KEY (ID)
    VALUES (1,'Комедия'),
    (2,'Драма'),
    (3,'Мультфильм'),
    (4,'Триллер'),
    (5,'Документальный'),
    (6,'Боевик');

MERGE INTO PUBLIC.USERS (ID, NAME,EMAIL,LOGIN,BIRTHDAY) VALUES
	 (1, 'est adipisicing','mail@yandex.ru','doloreUpdate','1976-09-20'),
	 (2, 'friend adipisicing','friend@mail.ru','friend','1976-08-20'),
	 (3, 'common','friend@common.ru','common','2000-08-20');
MERGE INTO PUBLIC.FILMS (ID, NAME,DESCRIPTION,MPA_ID,RELEASE_DATE,DURATION) VALUES
	 (1, 'Film Updated','New film update decription',5,'1989-04-17',190),
	 (2, 'New film','New film about friends',3,'1999-04-30',120);
MERGE INTO PUBLIC.FILMS_GENRES (FILM_ID,GENRE_ID) VALUES
	 (2,1),
	 (2,2);
MERGE INTO PUBLIC.FRIENDSHIPS (ID, USER_ID,FRIEND_ID,IS_ACCEPTED) VALUES
	 (1,2,3,false),
	 (2,1,3,false);
DELETE FROM reviews;