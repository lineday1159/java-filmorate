create table IF NOT EXISTS users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100),
    email varchar(100) NOT NULL,
    login varchar(100) NOT NULL,
    birthday date
    );

create unique index if not exists USER_EMAIL_UINDEX on users (email);
create unique index if not exists USER_EMAIL_UINDEX on users (login);

create table IF NOT EXISTS genres
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL,
    CONSTRAINT uq_genres_name UNIQUE (name)
    );


create table IF NOT EXISTS mpa
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL,
    description varchar(200),
    CONSTRAINT uq_mpa_name UNIQUE (name)
    );


create table IF NOT EXISTS friendships
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   INTEGER REFERENCES users (id),
    friend_id INTEGER REFERENCES users (id),
    is_accepted boolean,
    CONSTRAINT uq_friendship UNIQUE (user_id,friend_id)
    );

alter table friendships alter COLUMN is_accepted SET DEFAULT FALSE;

create table IF NOT EXISTS films
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL,
    description varchar(200),
    mpa_id INTEGER REFERENCES mpa (id),
    release_date date,
    duration int
    );

create table IF NOT EXISTS films_genres
(
    film_id   INTEGER REFERENCES films (id),
    genre_id INTEGER REFERENCES genres (id),
    PRIMARY KEY(film_id, genre_id)
    );

create table IF NOT EXISTS films_likes
(
    film_id INTEGER REFERENCES films (id),
    user_id INTEGER REFERENCES users (id),
    PRIMARY KEY(film_id, user_id)
    );

CREATE TABLE IF NOT EXISTS reviews (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	content CHARACTER VARYING NOT NULL,
	is_positive BOOLEAN,
	user_id INTEGER REFERENCES users (id),
	film_id INTEGER REFERENCES films (id),
	CONSTRAINT uq_user_film_review UNIQUE (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS review_likes (
	user_id INTEGER REFERENCES users (id),
	review_id INTEGER REFERENCES reviews (id) ON DELETE CASCADE,
	was_usefull INTEGER NOT NULL,
	CONSTRAINT uq_user_review_like UNIQUE (user_id, review_id)
);

CREATE VIEW IF NOT EXISTS prepare_reviews AS
SELECT r.*, SUM(rl.was_usefull) AS useful
FROM REVIEWS r
LEFT JOIN REVIEW_LIKES rl
ON rl.review_id = r.id
GROUP BY r.ID, r.content, r.is_positive, r.user_id, r.film_id;;